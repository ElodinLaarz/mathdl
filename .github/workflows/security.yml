name: Security Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        # Only continue on error for scheduled runs
        continue-on-error: ${{ github.event_name == 'schedule' }}

      - name: Show audit fix suggestions
        if: failure()
        run: npm audit fix --dry-run

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    # Skip CodeQL on scheduled runs to save resources
    if: github.event_name != 'schedule'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project (if build script exists)
        run: |
          if npm run build --if-present; then
            echo "Build completed successfully"
          else
            echo "No build script found or build failed - continuing with source analysis"
          fi
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security check (if config exists)
        run: |
          if [ -f ".eslintrc.*" ] || [ -f "eslint.config.*" ]; then
            # Check if security plugin is available
            if npm list eslint-plugin-security >/dev/null 2>&1; then
              npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
            else
              echo "ESLint security plugin not found - install eslint-plugin-security for enhanced security checks"
            fi
          else
            echo "No ESLint configuration found - skipping ESLint security check"
          fi
        continue-on-error: true

      - name: Run TypeScript type check (if available)
        run: |
          if [ -f "tsconfig.json" ]; then
            if npm run typecheck --if-present; then
              echo "TypeScript check passed"
            else
              # Try npx tsc if npm script doesn't exist
              npx tsc --noEmit || echo "TypeScript check failed or not configured"
            fi
          else
            echo "No TypeScript configuration found"
          fi
        continue-on-error: true

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-analysis-results
          path: |
            eslint-results.json
          retention-days: 7

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Only fetch recent history for PR/push events
          fetch-depth: ${{ github.event_name == 'schedule' && 0 || 50 }}

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || '' }}
          head: ${{ github.sha }}
          extra_args: --only-verified

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    # Skip Semgrep for dependabot PRs and limit to important events
    if: github.actor != 'dependabot[bot]' && (github.event_name != 'schedule' || github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    # Only run license check on scheduled runs or main branch
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Apache-1.1;BSD;CC0-1.0;Unlicense' --excludePrivatePackages
        continue-on-error: ${{ github.event_name == 'schedule' }}

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [dependency-security, codeql-analysis, static-analysis, secrets-scan, semgrep-scan]
    if: always() && github.event_name != 'schedule'
    steps:
      - name: Check security results
        run: |
          echo "## Security Check Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Dependency Security | ${{ needs.dependency-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîé CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìä Static Analysis | ${{ needs.static-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîê Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Semgrep Scan | ${{ needs.semgrep-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if critical security checks failed
          if [[ "${{ needs.dependency-security.result }}" == "failure" ]] || \
             [[ "${{ needs.secrets-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.semgrep-scan.result }}" == "failure" ]]; then
            echo "‚ùå Critical security checks failed!"
            exit 1
          else
            echo "‚úÖ All critical security checks passed!"
          fi
